{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to RobotCode \u00b6 An extension which brings support for RobotFramework to Visual Studio Code , including features like code completion, debugging, test explorer, refactoring and more! Features \u00b6 With RobotCode you can edit your code with auto-completion, code navigation, syntax checking and many more. Here is a list of Features: Autocomplete and IntelliSense Code Navigation Diagnostics and Linting Code Formatting Running and Debugging Multi-root Workspace folders Find implementations and references of keywords, variables, libraries, resource and variable files Show codelenses for keyword definitions Test Explorer Refactorings renaming keywords, variables, tags Autocomplete and IntelliSense \u00b6 Autocompletion for: - Libraries with parameters - Resources, - Variables - Keywords with parameters - Namespaces Autocompletion supports all supported variables types - local variables - variables from resource files - variables from variables file (.py and .yaml) - static and dynamic - command line variables - builtin variables Code Navigation \u00b6 Symbols Goto definitions and implementations Keywords Variables Libraries Resources Find references Keywords Variables Imports Libraries Resources Variables Tags Errors and Warnings Diagnostics and Linting \u00b6 RobotCode analyse your code and show diagnostics for: - Syntax Errors - Unknown keywords - Duplicate keywords - Missing libraries, resource and variable imports - Duplicate libraries, resource and variable imports - ... and many more For most things RobotCode uses the installed RobotFramework version to parse and analyse the code, so you get the same errors as when you run it. Get additional code analysis with Robocop . Just install it in your python environment. Code Formatting \u00b6 RobotCode can format your code with the internal RobotFramework robot.tidy tool (deprecated), but also with Robotidy . Just install it. Running and Debugging \u00b6 RobotCode supports running and debugging of RobotFramework testcases and tasks out of the box, directly from the definition of the test or suite. In the debug console you can see all log messages of the current run and navigate to the keyword the message was written by. Multi-root Workspace folders \u00b6 RobotCodes support for Multi-root Workspaces , enables loading and editing different Robotframework projects/folders with different RobotFramework/Python environments and settings at the same time or you can share the same RobotFramework/Python environment and settings for all folders in the workspace.","title":"Home"},{"location":"#welcome-to-robotcode","text":"An extension which brings support for RobotFramework to Visual Studio Code , including features like code completion, debugging, test explorer, refactoring and more!","title":"Welcome to RobotCode"},{"location":"#features","text":"With RobotCode you can edit your code with auto-completion, code navigation, syntax checking and many more. Here is a list of Features: Autocomplete and IntelliSense Code Navigation Diagnostics and Linting Code Formatting Running and Debugging Multi-root Workspace folders Find implementations and references of keywords, variables, libraries, resource and variable files Show codelenses for keyword definitions Test Explorer Refactorings renaming keywords, variables, tags","title":"Features"},{"location":"#autocomplete-and-intellisense","text":"Autocompletion for: - Libraries with parameters - Resources, - Variables - Keywords with parameters - Namespaces Autocompletion supports all supported variables types - local variables - variables from resource files - variables from variables file (.py and .yaml) - static and dynamic - command line variables - builtin variables","title":"Autocomplete and IntelliSense"},{"location":"#code-navigation","text":"Symbols Goto definitions and implementations Keywords Variables Libraries Resources Find references Keywords Variables Imports Libraries Resources Variables Tags Errors and Warnings","title":"Code Navigation"},{"location":"#diagnostics-and-linting","text":"RobotCode analyse your code and show diagnostics for: - Syntax Errors - Unknown keywords - Duplicate keywords - Missing libraries, resource and variable imports - Duplicate libraries, resource and variable imports - ... and many more For most things RobotCode uses the installed RobotFramework version to parse and analyse the code, so you get the same errors as when you run it. Get additional code analysis with Robocop . Just install it in your python environment.","title":"Diagnostics and Linting"},{"location":"#code-formatting","text":"RobotCode can format your code with the internal RobotFramework robot.tidy tool (deprecated), but also with Robotidy . Just install it.","title":"Code Formatting"},{"location":"#running-and-debugging","text":"RobotCode supports running and debugging of RobotFramework testcases and tasks out of the box, directly from the definition of the test or suite. In the debug console you can see all log messages of the current run and navigate to the keyword the message was written by.","title":"Running and Debugging"},{"location":"#multi-root-workspace-folders","text":"RobotCodes support for Multi-root Workspaces , enables loading and editing different Robotframework projects/folders with different RobotFramework/Python environments and settings at the same time or you can share the same RobotFramework/Python environment and settings for all folders in the workspace.","title":"Multi-root Workspace folders"},{"location":"features/","text":"coming soon...","title":"Features"},{"location":"installation/","text":"comming soon ... def do_something (): pass *** Settings *** Documentation A test suite with a single test. *** Test Cases *** Example Log Hello, Robot!","title":"Installation"}]}