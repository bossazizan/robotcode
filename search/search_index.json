{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to RobotCode","text":""},{"location":"#language-support-for-robot-framework-for-visual-studio-code","title":"Language support for Robot Framework for Visual Studio Code","text":"<p>An extension which brings support for RobotFramework to Visual Studio Code, including features like code completion, debugging, test explorer, refactoring and more!</p>"},{"location":"#features","title":"Features","text":"<p>With RobotCode you can edit your code with auto-completion, code navigation, syntax checking and many more. Here is a list of Features:</p> <ul> <li>Autocomplete and IntelliSense</li> <li>Code Navigation</li> <li>Diagnostics and Linting</li> <li>Code Formatting</li> <li>Running and Debugging</li> <li>Multi-root Workspace folders</li> <li>Find implementations and references of keywords, variables, libraries, resource and variable files</li> <li>Show codelenses for keyword definitions</li> <li>Test Explorer</li> <li>Refactorings</li> <li>renaming keywords, variables, tags</li> </ul>"},{"location":"#autocomplete-and-intellisense","title":"Autocomplete and IntelliSense","text":"<p>Autocompletion for: - Libraries with parameters - Resources, - Variables - Keywords with parameters - Namespaces</p> <p></p> <p>Autocompletion supports all supported variables types   - local variables   - variables from resource files   - variables from variables file (.py and .yaml)     - static and dynamic   - command line variables   - builtin variables</p> <p></p>"},{"location":"#code-navigation","title":"Code Navigation","text":"<ul> <li>Symbols</li> <li>Goto definitions and implementations</li> <li>Keywords</li> <li>Variables</li> <li>Libraries</li> <li>Resources</li> <li>Find references</li> <li>Keywords</li> <li>Variables</li> <li>Imports<ul> <li>Libraries</li> <li>Resources</li> <li>Variables</li> </ul> </li> <li>Tags</li> <li>Errors and Warnings</li> </ul>"},{"location":"#diagnostics-and-linting","title":"Diagnostics and Linting","text":"<p>RobotCode analyse your code and show diagnostics for: - Syntax Errors - Unknown keywords - Duplicate keywords - Missing libraries, resource and variable imports - Duplicate libraries, resource and variable imports - ... and many more</p> <p>For most things RobotCode uses the installed RobotFramework version to parse and analyse the code, so you get the same errors as when you run it.</p> <p>Get additional code analysis with Robocop. Just install it in your python environment.</p>"},{"location":"#code-formatting","title":"Code Formatting","text":"<p>RobotCode can format your code with the internal RobotFramework robot.tidy tool (deprecated), but also with Robotidy. Just install it.</p>"},{"location":"#running-and-debugging","title":"Running and Debugging","text":"<p>RobotCode supports running and debugging of RobotFramework testcases and tasks out of the box, directly from the definition of the test or suite.</p> <p></p> <p>In the debug console you can see all log messages of the current run and navigate to the keyword the message was written by.</p>"},{"location":"#multi-root-workspace-folders","title":"Multi-root Workspace folders","text":"<p>RobotCodes support for Multi-root Workspaces, enables loading and editing different Robotframework projects/folders with different RobotFramework/Python environments and settings at the same time or you can share the same RobotFramework/Python environment and settings for all folders in the workspace.</p>"}]}